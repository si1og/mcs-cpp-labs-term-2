/**
 * Лабораторная работа №2. Массивы объектов, простое наследование, виртуальные
 * функции, применение наследования.
 *
 * В этой работе и далее предполагается, что вы будете использовать классы,
 * написанные в прошлых работах, и дополнять их по необходимости. Эти классы
 * будут называться по имени без дополнительных указаний, что их надо взять из
 * прошлой работы.
 *
 * Предполагается, что новый классы будут созданы по аналогии с предыдущими
 * работами в отдельных файлах, которые будут включены в сборку.
 *
 * При работе с классами - в учебных целях - нельзя пользоваться контейнерами
 * стандартной библиотеки и нужно следовать принципам инкапсуляции.
 */

#include <iostream>
#include <cstring>

#include "my-string.hpp"
#include "basefile.hpp"
#include "base32file.hpp"
#include "rlefile.hpp"
#include "Base32File2.hpp"
#include "RleFile2.hpp"


using namespace std;

void write_int(IFile& file, int n) {
  char buffer[20]; 
  int idx = 0;

  if (n < 0) {
    char minus = '-';
    file.write(&minus, 1);
    n = -n;
  }

  do {
    buffer[idx++] = '0' + (n % 10);
    n /= 10;
  } while (n > 0);

  for (int i = idx - 1; i >= 0; --i) {
    file.write(&buffer[i], 1);
  }
}

int main() {
    /**
     * Задание 1. Массивы объектов класса.
     */

    /**
     * Задание 1.1. Массив объектов.
     *
     * Объявите и проинициализируйте массив ar из объектов типа MyString.
     * Выведите элементы массива на консоль.
     */

      // {
      //   MyString ar[5] = { 
      //     "Use",
      //     "typescript",
      //     "!"
      //   };

      //   for (int i = 0; i < 5; ++i) ar[i].print();
      // } 


    /**
     * Замените размер массива с 3 на 5, не меняя список инициализаторов.
     *
     * Чем были инициализированы последние 2 элемента? 
      [
        пустыми строками - вызывается базовый конструктор MyString
      ]
      Какие значения могут стоять в списке инициализаторов - в вашем случае
      и в общем случае?
      [
        Любые значения, конвертируемые в MyString
        ("Hello", nullptr)
      ]
     */

    /**
     * Задание 1.2. Массив указателей на объекты.
     *
     * Объявите и проинициализируйте массив arPtr из трех указателей на объекты
     * типа MyString. Выведите элементы массива на консоль.
     */
      // {
      //   MyString s1("First");
      //   MyString s2("Second");
      //   MyString s3("Third");

      //   MyString* arPtr[3] = { &s1, &s2, &s3 };

      //   for (int i = 0; i < 3; ++i)
      //     arPtr[i]->print();
      // }
    /**
     * Задание 2. Простое наследование. Аргументы конструктора, передаваемые в
     * базовый класс.
     */

    /**
     * Задание 2.1. Базовый класс.
     *
     * Создайте класс BaseFile, который будет реализовывать работу с файлами с
     * помощью стандартных средств C (cstdio).
     *
     * Класс должен иметь 3 конструктора: первый - конструктор по умолчанию,
     * второй должен принимать путь к файлу и параметры для открытия (как в
     * fopen), третий должен принимать готовый указатель FILE*.
     *
     * Считается, что этот класс *обладает* своим ресурсом - открытым файлом.
     * Что должно быть в дестукторе этого класса?
     *
     * Добавьте следующие методы:
     * - bool is_open() - возвращает true, если файл успешно открыт;
     * - bool can_read() - возвращает true, если из файла можно считать данные;
     * - bool can_write() - возвращает true, если в файл можно записать данные;
     * - size_t write_raw(const void *buf, size_t n_bytes) - записывает
     *   указанное количество байт в файл и возвращает количество байт, которое
     *   удалось записать;
     * - size_t read_raw(void *buf, size_t max_bytes) - читает доступные данные
     *   в буфер, но не более указанного количества и возвращает количество
     *   байт, которое удалось считать;
     * - long tell() - возвращает текущий сдвиг файла (см. функцию ftell);
     * - bool seek(long offset) - устанавливает сдвиг файла (см. функцию fseek)
     *   и возвращает true, если операция успешна.
     *
     * Добавьте также методы `read` и `write`, которые в этом классе будут
     * делать буквально то же, что `read_raw` и `write_raw`, они понадобятся нам
     * позже.
     *
     * Проверьте работу этого класса.
     */

    //  {
    //   const char* filename = "txt/demo.txt";
    //   const char* message = "Hello from BaseFile!";
    //   char buffer[100];
    //   {
    //     BaseFile writer(filename, "wb");
    //     if (writer.is_open() && writer.can_write()) {
    //       writer.write(message, strlen(message));
    //       cout << "Данные успешно записаны в файл.\n";
    //     }
    //   }

    //   BaseFile reader(filename, "rb");
    //   if (reader.is_open() && reader.can_read()) {
    //     size_t bytes_read = reader.read(buffer, sizeof(buffer) - 1);
    //     buffer[bytes_read] = '\0';
    //     cout << "Прочитано из файла: " << buffer << "\n";
    //     cout << "Текущая позиция в файле: " << reader.tell() << "\n";

    //     reader.seek(0);
    //     cout << "Позиция после seek(0): " << reader.tell() << "\n";
    //   } else {
    //     cerr << "Ошибка открытия файла для чтения.\n";
    //   }
    // }


    /**
     * Задание 2.2. Производные классы.
     *
     * Производный класс *наследуется* от базового класса и каким-то образом
     * расширяет его функциональность, при это все еще умея все, что умеет
     * базовый класс.
     *
     * Реализуйте следующие производные классы от класса BaseFile. Производные
     * классы нужно унаследовать так, чтобы пользователю были все еще доступны
     * методы базового класса. Каким образом нужно унаследовать класс для этого?
     * Как еще можно унаследовать класс?
     *
     * Производные классы могут располагаться в том же файле, где и базовый
     * класс.
     *
     * В производных классах добавьте необходымые конструкторы, которые будут
     * вызывать конструктор базового класса.
     *
     * Проверьте работу производных классов.
     */

    /**
     * Задание 2.2.1. Base32 кодировщик/декодировщик.
     *
     * Создайте производный класс Base32File, который будет проводить при
     * записи кодировку-декодировку данных, по алгоритму, который вы
     * реализовали в лабораторной работе №4 прошлого семестра.
     *
     * Переопределите методы `read` и `write`, которые будут проводить чтение из
     * файла с декодировкой и запись в файл с кодировкой соответственно.
     *
     * Добавьте возможность пользователю передать в конструктор таблицу
     * кодировки, по умолчанию используется таблица "A..Z1..6".
     */

      // {
      //   {
      //     Base32File base32("test_base32.txt", "wb");
      //     MyString originalText("Sid Meier's Civilization V is a 4X turn-based strategy video game developed by Firaxis Games and published by 2K. It is the sequel to Civilization IV, and was released for Windows in September 2010, for Mac OS X on November 23, 2010, and for Linux on June 10, 2014.");
      //     base32.write(originalText);
      //   }
        
      //   Base32File base32read("test_base32.txt", "rb");
      //   MyString decodedText = base32read.read();
      //   decodedText.print();
      // }

    /**
     * Задание 2.2.2. RLE-сжатие.
     *
     * Создайте производный класс RleFile, который будет проводить побайтовое
     * сжатие при помощи алгоримта RLE (для простоты можно реализовать
     * неэффективный алгоритм, где последовательности без повторений отдельно
     * не кодируются).
     *
     * Переопределите методы `read` и `write`, которые будут проводить чтение из
     * файла с извлечением сжатой информации и запись в файл со сжатием
     * соответственно.
     *
     * Проверьте сжатие/извлечение на примере какого-нибудь ASCII-арта,
     * например, котенка из лабораторной №3 прошлого семестра. Посмотрите,
     * получилось ли добиться уменьшения размера хранимых данных.
     */

     {
      const char* input_ascii_path = "txt/ascii-art.txt";
      const char* compressed_path = "txt/ascii-art.rle";

      MyString art;
      {
        BaseFile ascii_in(input_ascii_path, "rb");
        char ch;
        while (ascii_in.read(&ch, 1) == 1) {
          art.append(ch);
        }

        RleFile rle_out(compressed_path, "wb");
        rle_out.write(art);
        cout << "Сжатие завершено.\n";
      }

      {
        RleFile rle_in(compressed_path, "rb");
        MyString decoded = rle_in.read(10000);

        cout << "\nВосстановленный ASCII-арт:\n";
        decoded.print();
      }
     }

    /**
     * Задание 2.3. Конструкторы и деструкторы базового и производного классов.
     *
     * Установите отладочную печать в конструкторах и деструкторах каждого
     * класса из этого задания. Создайте локальные объекты производных классов,
     * отметьте, в каком порядке вызываются конструкторы и деструкторы при
     * инициализации и деинициализации этих классов.
     */

      // {
      //   cout << "Создание Base32File\n";
      //   {
      //     Base32File b32("txt/test.txt", "wb");
      //   }
      //   cout << "\nСоздание RleFile\n";
      //   {
      //     RleFile rle("txt/art-text.txt", "wb");
      //   }
      //   cout << "\nСоздание MyString\n";
      //   {
      //     MyString str("Hello!");
      //   }
      // }

    /**
     * Задание 2.4. Ранее связывание.
     *
     * На основе данной заготовки напишите код, который запишет в файл строковое
     * представление целого числа. Вы должны использовать один и тот же код для
     * всех файлов, меняя только имя объекта (bf / b32f / rf), в который идет
     * запись.
     */

    // {
    //     BaseFile bf("txt/basefile.txt", "wb");
    //     Base32File b32f("txt/base32file.txt", "wb");
    //     RleFile rf("txt/rlefile.txt", "wb");

    //     int n = 123456;
    //     if (n < 0) {
    //       char minus = '-';
    //       bf.write(&minus, 1);
    //       n = -n;
    //     }
    //     char buffer1[20];
    //     int idx1 = 0;
    //     do {
    //       buffer1[idx1++] = '0' + (n % 10);
    //       n /= 10;
    //     } while (n > 0);
    //     for (int i = idx1 - 1; i >= 0; --i) {
    //       bf.write(&buffer1[i], 1);
    //     }
      

    //     n = 123456;
    //     if (n < 0) {
    //       char minus = '-';
    //       b32f.BaseFile::write(&minus, 1);
    //       n = -n;
    //     }
    //     char buffer2[20];
    //     int idx2 = 0;
    //     do {
    //       buffer2[idx2++] = '0' + (n % 10);
    //       n /= 10;
    //     } while (n > 0);
    //     for (int i = idx2 - 1; i >= 0; --i) {
    //       b32f.BaseFile::write(&buffer2[i], 1);
    //     }

    //     n = 123456;
    //     if (n < 0) {
    //       char minus = '-';
    //       rf.BaseFile::write(&minus, 1);
    //       n = -n;
    //     }
    //     char buffer3[20];
    //     int idx3 = 0;
    //     do {
    //       buffer3[idx3++] = '0' + (n % 10);
    //       n /= 10;
    //     } while (n > 0);
    //     for (int i = idx3 - 1; i >= 0; --i) {
    //       rf.BaseFile::write(&buffer3[i], 1);
    //     }
    // } 

    /**
     * Задание 2.5. Передача объекта по ссылке / указателю.
     *
     * Прошлое задание выглядит странновато - зачем повторять код три раза?
     * Хорошо бы сделать функцию, которая примет объект файла и число, и
     * выполнит эти действия.
     *
     * Реализуйте функцию `write_int(BaseFile &file, int n)`, которая будет
     * принимать ссылку на файл и число, которое нужно будет напечатать.
     *
     * Приницип наследования предписывает, что везде, где можно использовать
     * базовый класс, можно использовать производный класс. Проверьте, можно
     * ли вызвать функцию, передав в нее объект класса Base32File и RleFile.
     *
     * Имеет ли вызов этой функции для производного класса тот же результат,
     * что и код, который вы написали выше? Почему?
      - для BaseFile резальтат будет идентичным, так как вызывается тот же метод write(const void*, size_t),
      - для производных классов Base32File и RleFile результат также не будет отличаться, т.к.
        для всех классов будет вызываться одна и та же версия метода: BaseFile::write(const void*, size_t).
     */
     
      // {
      //   BaseFile bf("txt/basefile.txt", "wb");
      //   Base32File b32f("txt/base32file.txt", "wb");
      //   RleFile rf("txt/rlefile.txt", "wb");
      
      //   write_int(bf, 123456);
      //   write_int(b32f, 123456);
      //   write_int(rf, 123456);
      // }

    /**
     * Задание 2.6. Виртуальные функции, позднее связывание.
     *
     * Объявите функции read и write в базовом классе *виртуальными*. Что это
     * означает? 
     [метод вызывается через таблицу виртуальных функций в runtime (позднее связывание)]
     Как изменился размер объектов классов BaseFile, Base32File и
     * RleFile? Почему?
     [добавился указатель на таблицу виртуальных функций, размер объектов увеличился]
     *
     * Как изменилось поведение при вызове функции `write_int` для производных
     * классов? Почему?
     [теперь функция может вызывать переопределённые методы, если они переопределены с той же сигнатурой]
     */

      // Если в производном классе переопределена виртуальная функция с той же
      // сигнатурой, то при вызове метода через указатель или ссылку на базовый
      // класс будет вызвана переопределённая версия.

    /**
     * Задание 2.7. Виртуальный деструктор.
     *
     * В следующем блоке кода добавьте удаление динамической памяти.
     *
     * Какой деструктор при этом вызывается? Почему? К каким проблемам это может
     * привести?
     *
     * Исправьте эту ситуацию.
     */

    {
      BaseFile *files[] = { 
        new BaseFile("txt/base.txt", "wb"), 
        new RleFile("txt/rle.txt", "wb"), 
        new Base32File("txt/base32.txt", "wb")
      };

      for (int i = 0; i < 3; ++i) {
        files[i]->write("Hello!", 6);
      }

      // Когда деструктор базоваго класса невиртуальный, то при удалении вызиывется
      // только он, деструкторы классов RleFile и Base32File не вызываются.

      // Проблемы:
        // 1) утечка ресурсов, если производный класс выделил какую-то память,
        // 2) непредсказуемое поведение, особенно если есть сложные поля или ресурсы.

      for (int i = 0; i < 3; ++i) {
        delete files[i];
      }

      // Когда базовый класс имеет виртуальный деструктор, при удалении объекта через
      // указатель на базовый класс, компилятор автоматически вызывает корректный деструктор 
      // из таблицы виртуальных функций (vtable).
    } 

    /**
     * Задание 2.8. Массив объектов производных классов.
     *
     * Раскомментируйте следующий блок и объясните, почему:
     * а) не возникает ошибок при компиляции;
      [
        Компилятор видит просто создание массивов объектов и указатели базового типа. 
        С точки зрения языка C++, этот код выглядит формально корректным, поэтому 
        компиляция проходит успешно.
      ]
     * б) возникают ошибки при выполнении.
      [
        Размер объекта производного класса (Base32File) больше размера базового класса (BaseFile).
        => При доступе по указателю базового типа происходит некорректный расчёт адресов объектов 
           внутри массива, т.к. компилятор ожидает объекты именно базового размера.
        => Это приводит к повреждению памяти, некорректному поведению и segmentation fault в runtime.
      ]
    
     *
     * Этот пример показывает очень плохую практику, которая приводит к ошибкам;
     * для создания массива объектов производного класса и используйте массив
     * указателей на базовый класс, как это было сделано выше. Реализуйте ту же
     * логику, используя массив указателей на объекты базового класса.
     */

    // // {
    // //   BaseFile *base_files = new BaseFile[2] { BaseFile(...), BaseFile(...) };
    // //   BaseFile *b32_files = new Base32File[2] { Base32File(...), Base32File(...) };

    // //   for (int i = 0; i < 2; ++i) {
    // //     base_files[i].write("Hello!", 6);
    // //     b32_files[i].write("Hello!", 6);
    // //   }

    // //   delete [] base_files;
    // //   delete [] b32_files;
    // // }

    // {
    //   BaseFile* files[] = {
    //     new BaseFile("txt/base.txt", "wb"),
    //     new Base32File("txt/base32.txt", "wb")
    //   };
      
    //   for (int i = 0; i < 2; ++i) {
    //       files[i]->write("Hello!", 6);
    //   }
      
    //   for (int i = 0; i < 2; ++i) {
    //       delete files[i];
    //   }
    // }

    /**
     * Задание 3. Чисто виртуальные функции. Интерфейсы. Композиция классов.
     *
     * Наследование позволяет довольно просто переиспользовать данные и логику
     * других классов, однако зачастую этот механизм недостаточно гибкий для
     * полноценного переиспользования.
     *
     * Например, сможем ли мы в получившейся иерархии классов реализовать
     * одновременно и кодирование в base32, и сжатие при записи данных в файл?
     * Или сможем ли мы вместо записи в файл на диске делать запись в строковый
     * буфер в памяти?
     *
     * При дальнейшем рассмотрении окажется, что при помощи наследования мы
     * крепко *связали* логику преобразования данных с записью в конкретный
     * файл. Далее мы рассмотрим один из способов разделения такой логики.
     */

    /**
     * Задание 3.1. Абстрактный базовый класс, чисто виртуальные функции.
     *
     * Первая проблема в нашей реализации - все наследники BaseFile будут всегда
     * обязаны непосредственно писать в файл на диске. Чтобы избавиться от этой
     * необходимости, стоит сделать базовый класс *абстрактным* в том смысле,
     * что у него не будет полей связанных с контретным способом писать в файл.
     *
     * Создайте класс `IFile`, в котором не будет полей, но будут методы
     * `can_read`, `can_write`, `read` и `write` с такими же сигнатурами, как и
     * классе `BaseFile`. Что именно будут делать эти методы? Класс `IFile` не
     * может знать, поскольку логику этих методов будут определять наследники.
     * В этом классе эти методы не имеют реализации, и они должны быть объявлены
     * *чисто виртуальными*.
     *
     * Какие ограничения накладывает на класс наличие чисто виртуального метода?
     *
      [
        Наличие чисто виртуальных методов в интерфейсе требует, чтобы каждый 
        класс, унаследованный через несколько уровней, имел совместимые реализации 
        этих методов (с точно такой же сигнатурой).
      ]

     * Получается, что в классе `IFile` есть только чисто виртуальные методы, и
     * единственная цель такого класса - определять, что должны уметь делать его
     * наследники. Совокупность действий, которые можно сделать с объектом,
     * называется его *интерфейсом*, и такие классы тоже часто называются
     * интерфейсами, отсюда берется приставка "I" в имени класса.
     *
     * Унаследуйте класс `BaseFile` от класса `IFile` и измените функцию
     * `write_int`, чтобы она работала с произвольным наследником `IFile`.
     *
     * Убедитесь, что в программе выше ничего не сломалось. [сломалось)]
     */

    /**
     * Задание 3.2. Композиция вместо наследования.
     *
     * Реализуйте классы `Base32File2` и `RleFile2`, которые будут унаследованы
     * от класса `IFile` и в конструкторе будут получать другой объект `IFile`,
     * чьи функции они будут использовать вместо функций базового класса.
     *
     * Объекты получают объект `IFile` в виде указателя на динамически
     * выделенную память, и они ответственны за ее очищение.
     *
     * Использование объектом другого объекта в качестве поля называется
     * *композицией*.
     *
     * Проверьте, что используемые ниже объекты работают так же, как объекты
     * классов `Base32File` и `RleFile`.
     */

    // {
    //   Base32File2 b32f(new BaseFile("txt/base32file2.txt", "wb"));
    //   RleFile2 rf(new Base32File2(new BaseFile("txt/rle_over_base32file2.txt", "wb")));
  
    //   write_int(b32f, 123456);
    //   write_int(rf, 123456);
  
    //   return 0;
    // } 

    /**
     * Задание 3.3. Больше композиции!
     *
     * Не реализовывая больше никаких классов, соорудите объект-наследник IFile,
     * который будет при вызове метода `write` два раза кодировать в base32,
     * после чего применять сжатие RLE и только после этого писать в файл.
     */

    // {
    //   RleFile2 rle(
    //     new Base32File2(
    //       new Base32File2(
    //         new BaseFile("txt/double_encoded_and_rle.txt", "wb")
    //       )
    //     )
    //   );
      
    //   write_int(rle, 123456);
    // }

    return 0;
}
